import { BaseModelDto } from '@adocasts.com/dto/base'
import Track from '#models/track'
import { ContributorMinimalDto } from '#dtos/contributor'
import { ImageBaseDto } from '#dtos/image'
import { createdAtApiProperty, nanoIdApiProperty, updatedAtApiProperty } from '#config/openapi'
import { ApiProperty, ApiPropertyOptional } from '@foadonis/openapi/decorators'
import { TrackType } from '../enum/track_enum.js'

export class TrackMinimalDto extends BaseModelDto {
  @nanoIdApiProperty()
  declare id: string

  @ApiProperty({
    type: 'string',
    description: 'The name of the track.',
    example: 'Sample Track Name',
  })
  declare name: string

  constructor(track?: Track) {
    super()
    if (!track) return
    this.id = track.publicId
    this.name = track.name
  }
}

export class TrackBaseDto extends TrackMinimalDto {
  @ApiProperty({
    type: 'number',
    description: 'The start time of the track in milliseconds.',
    example: 0,
  })
  declare start: number

  @ApiProperty({
    type: 'number',
    description: 'The end time of the track in milliseconds.',
    example: 0,
  })
  declare end: number

  @ApiProperty({
    type: 'number',
    description:
      'The duration of the track in milliseconds. This is the difference between start and end and autogenerated.',
    example: 0,
  })
  declare duration: number

  @ApiPropertyOptional({
    type: () => [ContributorMinimalDto],
    description: 'List of contributors associated with the track.',
    nullable: true,
  })
  declare contributors: ContributorMinimalDto[]

  @ApiPropertyOptional({
    type: () => [ImageBaseDto],
    description:
      'List of images associated with the track. Images should be considered optional and only be loaded upon user-interaction.',
    nullable: true,
  })
  declare images: ImageBaseDto[]

  @ApiProperty({
    type: 'number',
    format: 'integer',
    description:
      'The type of the track. This can be one of the following:\n1 - Chapter\n2 - Intro\n3 - Outro\n4 - Publisher Intro\n5 - Publisher Outro',
    example: 1,
    default: 1,
    minimum: 1,
    maximum: 5,
  })
  declare type: TrackType

  @ApiPropertyOptional({})
  declare subTracks: TrackBaseDto[]

  constructor(track?: Track) {
    super(track)
    if (!track) return
    this.start = track.start
    this.end = track.end
    this.duration = track.duration
    track.type = track.type || TrackType.CHAPTER
    if (track.contributors) {
      this.contributors = track.contributors.map(
        (contributor) => new ContributorMinimalDto(contributor)
      )
    }
    if (track.tracks) this.subTracks = track.tracks.map((subTrack) => new TrackBaseDto(subTrack))
    if (track.images) this.images = ImageBaseDto.fromArray(track.images)
  }
}

export class TrackFullDto extends TrackBaseDto {
  @createdAtApiProperty()
  declare createdAt: string

  @updatedAtApiProperty()
  declare updatedAt: string

  constructor(track?: Track) {
    super(track)
    if (!track) return
    this.createdAt = track.createdAt.toISO()!
    this.updatedAt = track.updatedAt.toISO()!
  }
}
